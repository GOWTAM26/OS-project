
#include<conio.h>
#include<stdio.h>



void TAT(int n, int rempt[10],int Cur_t,int Arrival_time[10], int Burst_time[10]);



int main() 

{

	

        int Proc_no,j,n,CurT,RemProc,indicator,time_quan,wait,tut,Arrival_time[10],Burst_time[10],rempt[10],x=1;

	indicator = 0;

	wait = 0;

	tut = 0;

	printf("Enter number of processes "); 

	scanf("%d",&n);

	RemProc = n;

	



	printf("\nEnter the arrival time and burst time of the processes\n");

	for(Proc_no = 0;Proc_no < n;Proc_no++) 

	{

		printf("\nProcess P%d\n",Proc_no+1);

		printf("Arrival time = "); 

		scanf("%d",&Arrival_time[Proc_no]);

		printf("Burst time = "); 

		scanf("%d",&Burst_time[Proc_no]); 

		rempt[Proc_no]=Burst_time[Proc_no]; 

	} 

	printf("The details of time quantum are as follows:\n");

	printf("The time quantum for first round is 3.\n"); 

	time_quan=3;

	CurT=0;



	for(Proc_no=0;RemProc!=0;) 

	{



		if(rempt[Proc_no]<=time_quan && rempt[Proc_no]>0)

		{ 

			CurT+=rempt[Proc_no]; 

			rempt[Proc_no]=0; 

			indicator=1; 

		} 

		else if(rempt[Proc_no]>0)

		{ 

			rempt[Proc_no]-=time_quan; 

			CurT+=time_quan; 

		} 

		if(rempt[Proc_no]==0 && indicator==1)			

		{ printf("%d",Proc_no);

			RemProc--;				

			printf("P %d",Proc_no+1); 

			printf("\t\t\t%d",CurT-Arrival_time[Proc_no]);

			printf("\t\t\t%d\n",CurT-Burst_time[Proc_no]-Arrival_time[Proc_no]);

			wait+=CurT-Arrival_time[Proc_no]-Burst_time[Proc_no]; 

			tut+=CurT-Arrival_time[Proc_no]; 

			indicator=0; 

                       

		} 

		if(Proc_no==n-1){

			x++;

			if(x==2){

				Proc_no=0;

				time_quan=6;

				

				printf("The time quantum for second round is 6. \n");

			}

			else{

				break;

			}

		}

		else if(CurT >= Arrival_time[Proc_no+1]){

			Proc_no++;

		}

		else{

			Proc_no=0;

		}

	}

	

	TAT(n, rempt, CurT, Arrival_time, Burst_time);

	

	return 0;

}





void TAT(int n,int rempt[10],int Cur_t,int Arrival_time[10], int Burst_time[10]){

	

	float avg_wait,avg_tut;

    int i,j,an=n,temp,btime[20],Proc_no[20],w_time[20],tut_t[20],total=0,loc;

    

    printf("Third round with least burst time.\n");

    

    for(i=0;i<an;i++)

    {

        btime[i]=rempt[i];

        w_time[i]=Cur_t-Arrival_time[i]-btime[i];

		Proc_no[i]=i+1;

    }

	

    for(i=0;i<an;i++)

    {

        loc=i;

        for(j=i+1;j<an;j++)

        {

            if(btime[j]<btime[loc]){

            	loc=j;

            }

        }

        temp=btime[i];

        btime[i]=btime[loc];

        btime[loc]=temp;

        temp=Proc_no[i];

        Proc_no[i]=Proc_no[loc];

        Proc_no[loc]=temp;

    }

	

    for(i=1;i<an;i++)

    {

        for(j=0;j<i;j++){

        	w_time[i]+=btime[j];

        }

        total+=w_time[i];

    }





 

    avg_wait=(float)total/n;

    total=0;

    printf("\nProcess\t\tBurst time\t\twaiting time\t\tTurnaround Time");

    for(i=0;i<an;i++)
    

    {

        tut_t[i]=btime[i]+w_time[i];

        total=total + tut_t[i];

        printf("\nP%d\t\t\t%d\t\t\t%d\t\t\t%d",Proc_no[i],btime[i],w_time[i],tut_t[i]);

    }



    avg_tut=(float)total/n;

    printf("\n\nAverage waiting time = %f",avg_wait);

    printf("\n Average turnaround time = %f\n",avg_tut);

	

}



